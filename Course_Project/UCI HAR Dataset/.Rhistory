plot(x = cars$speed, y = cars$dist, main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(mpg~cyl, mtcars)
hist(mtcars$mpg)
quit()
best("NY", "PP")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("NY", "PP")
ncol(outcome_data)
rm(list=ls())
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("TX","hola")
best("TX","heart attack")
best("TX","heart attack ")
best("TX","heart failure")
best("TX","pneumonia")
best("TX","pneumoniaa")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("TX","pneumoniaa")
best("TX","pneumonia")
outcome_data<- read.csv("C:/Data_Science/RProgramming/ProgrammingAssignment3/ProgAssignment3-data/outcome-of-care-measures.csv")
str(outcome_data)
outcome_data[,7]
v_states <- !is.na(outcome_data[,7])
list_of_states <- outcome_data[v_states,]
list_of_states
v_states <- !is.na(outcome_data[,"State"])
v_states
v_states <- !is.na(outcome_data[,state])
v_states <- !is.na(outcome_data[,State])
v_states <- !is.na(outcome_data[,7])
list_of_states <- outcome_data[v_states,]
list_of_states
View(list_of_states)
list_of_states <- outcome_data[v_states,7]
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("TX","pneumonia")
best("MV","pneumoniaa")
best("MV","pneumonia")
best("IL","pneumonia")
best("IL","pneumaonia")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
v_rate <- !is.na(outcome_data[,11])
good_outcome_data <- outcome_data[v_rate,]
View(good_outcome_data)
v_rate <- !is.nan(outcome_data[,11])
outcome_data <- as.numeric(,outcome)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
outcome_data[, outcome] <- as.numeric(outcome_data[,outcome])
outcome_data[, 11] <- as.numeric(outcome_data[,11])
v_rate <- !is.na(outcome_data[,11])
good_outcome_data <- outcome_data[v_rate,]
View(good_outcome_data)
View(outcome_data)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
outcome_data[, 11] <- as.numeric(outcome_data[,11])
v_rate <- !is.nan(outcome_data[,11])
good_outcome_data <- outcome_data[v_rate,]
View(good_outcome_data)
quit()
outcome_data<- read.csv("C:/Data_Science/RProgramming/ProgrammingAssignment3/ProgAssignment3-data/outcome-of-care-measures.csv")
nrow(outcome_data)
outcome_data[,c(1,7)]
outcome_data[,c("State")]
outcome_data[,c("Provider.number","State")]
outcome_data[,c("Provider.Number","State")]
outcome_data
head(outcome_data, 6)
head(outcome_data[,7], 6)
head(outcome_data[,c(1,7)], 6)
head(outcome_data[,c(1,7,11)], 6)
is.na(outcome_data[6,11])
(outcome_data[6,11])
x<-as.numeric(outcome_data[,11])
x
head(x,6)
x<-(outcome_data[,11])
head(x,6)
is.numeric(x[1])
x[1]
x<- as.numeric(x)
x
head(x,6)
x[1]
x<-(outcome_data[,11])
head(x,6)
x[1]
x[3]
x[4]
x[15]
x[1]
x[1]<-as.numeric(x[1])
x[1]
f<-factor(1:5)
f
factor(5:10)
as.numeric(factor(5:10))
x<-(outcome_data[,11])
rm(x)
x<-(outcome_data[,11])
y <- c("1", "2", "3", "Cuatro")
w<- as.numeric(y)
y
w
outcome_data<- read.csv("C:/Data_Science/RProgramming/ProgrammingAssignment3/ProgAssignment3-data/outcome-of-care-measures.csv",stringsAsFactors=FALSE)
View(outcome_data)
x<- outcome_data[,11]
head(x,6)
y<- as.numeric(x)
head(y,6)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
outcome_data<- read.csv("C:/Data_Science/RProgramming/ProgrammingAssignment3/ProgAssignment3-data/outcome-of-care-measures.csv",stringsAsFactors=FALSE)
outcome_data<- read.csv("C:/Data_Science/RProgramming/ProgrammingAssignment3/ProgAssignment3-data/outcome-of-care-measures.csv",stringsAsFactors=FALSE)
outcome_data[, 11] <- as.numeric(outcome_data[,11])
View(outcome_data)
v_rate <- !is.na(outcome_data[,11])
good_outcome_data <- outcome_data[v_rate,]
View(good_outcome_data)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
min(good_outcome_data[,11])
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("TX","heart attack")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("TX","heart attack")
best("TX","heart failure")
best("TX","pneumonia")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("TX","pneumonia")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("TX","pneumonia")
best("TX","heart failure")
best("TX","heart attack")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("TX","heart attack")
best("IL","heart attack")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("IL","heart attack")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
View(good_outcome_data)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
View(good_outcome_data)
bueno<- subset(good_outcome_data, State="AL" & "Hospital 30-Day Death (Mortality) Rates from Heart Attack" = 18.1)
bueno<- subset(good_outcome_data, State="AL" & "Hospital 30-Day Death (Mortality) Rates from Heart Attack" ==18.1)
View(bueno)
bueno<- subset(good_outcome_data, State=="AL" & "Hospital 30-Day Death (Mortality) Rates from Heart Attack" == 18.1)
View(bueno)
bueno<- subset(outcome_data, State=="AL" & "Hospital 30-Day Death (Mortality) Rates from Heart Attack" == 18.1)
View(bueno)
bueno<- subset(outcome_data, State=="AL" && "Hospital 30-Day Death (Mortality) Rates from Heart Attack" == 18.1)
View(bueno)
bueno<- subset(outcome_data, State=="AL")
bueno<- subset(outcome_data, State=="AL" & "Hospital 30-Day Death (Mortality) Rates from Heart Attack" < 19)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("TX", "pneumonia")
best("IL", "pneumonia")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("IL", "pneumonia")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("IL", "pneumonia")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("IL", "pneumonia")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("IL", "pneumonia")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("IL", "pneumonia")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("MD", "pneumonia")
best("MD", "heart attack")
w<- c("Diego", "Andres", "Caggiano")
w2<- sort(w)
w2
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("MD", "pneumonia")
best("MD", "heart attack")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("MD", "heart attack")
best("IL", "pneumonia")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
quit()
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
x<-list("Diego", "Andres", "Caggiano")
y<- sort(x)
x<-c("Diego", "Andres", "Caggiano")
y<- sort(x)
y
w<- c(10,30,20,60,3)
w2<- sort(w)
w2
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("MD", "heart attack")
best("MX", "heart attack")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart attack", 3)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("MN", "heart attack", "best")
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 5)
rankhospital("TX", "heart failure", 6)
rankhospital("TX", "heart failure", 1)
rankhospital("TX", "heart failure", "best")
rankhospital("TX", "heart failure", 1)
rankhospital("TX", "heart failure", best)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", best)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", "best")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("TX", "heart failure", "best")
rankhospital("TX", "heart failure", 1)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
quit()
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
z<- c(10,20,30,40,50)
for (j in z) print(z[j])
z<- [10,20,30,40,50]
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack", 1)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack", 1)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack", 1)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack", 1)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
result <- data.frame(hospital=Character(), state=character())
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
result <- data.frame(hospital=character(), state=character())
result
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart attack", 1)
rankall("heart failure", "worst")
rankall("heart failure", "best")
rankall("heart failure", 2)
rankall("heart failure", 1)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
rankall("heart failure", "best")
rankall("heart failure", "worst")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankhospital.R')
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/rankall.R')
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
quit()
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select (cran, r:arch:country)
select (cran, r_arch:country)
select (cran, country:r_arch)
cran
select (cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrage(cran2, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
library(dplyr)
cran<- tdl_df(mydf)
cran<- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<- group_by(cran, package)package
by_package<- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted<- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
quit()
setwd("C:\\Data_Science\\Getting and Cleaning Data\\Course_Project")
dir()
url<- https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, "project_data.zip", mode = "wb")
rm(list=ls())
quit()
setwd("C:\\Data_Science\\Getting and Cleaning Data\\Course_Project\\UCI HAR Dataset")
source('C:/Data_Science/Getting and Cleaning Data/Course_Project/run_analysis.R')
source('C:/Data_Science/Getting and Cleaning Data/Course_Project/run_analysis.R')
#This program:
#Merges the training and the test sets to create one data set.
#Extracts only the measurements on the mean and standard deviation for each measurement.
#Uses descriptive activity names to name the activities in the data set
#Transforms labels to descriptive variable names, by supressing special characters
#Creates a dataset named "DF" containing the information metioned above
#Creates a second data set named "DF_avg" with the average of each variable for each activity
#and each subject.
#Finally, both datasets are written to files "DF.txt" and "DF_avg.txt" in the current directory
# Including libraries
library(readr)
library(dplyr)
# Reading Features
features <- read_table2("features.txt", col_names = c("Feature_ID", "Feature_Description"), col_types = c(col_integer(), col_character()))
# Adjusting variable names to make them more readable
avector<- as.vector(features$Feature_Description)
# Substitute character "-" by "_" in description
avector2<- gsub("-", "_", avector)
# Substitute character "(" by "nothing" in description
avector3<- gsub("\\(", "", avector2)
# Substitute character ")" by "nothing" in description
avector4<- gsub("\\)", "", avector3)
# Substitute character "," by "_" in description
avector5<- gsub("\\,", "_", avector4)
# Substitute the initial 't' by the word 'time_'
avector6<- gsub("^t", "time_", avector5)
# Substitute the initial 'f' by the word 'frequency_'
avector7<- gsub("^f", "frequency_", avector6)
# after these changes, for instance, the variable name "fBodyGyro-bandsEnergy()-1,24" was changed to "frequency_BodyGyro_bandsEnergy_1_24"
var_names_vector <- avector7
# Merging Subjects and adding column names/types
subject_test<- read_table2("test/subject_test.txt", col_names = "Subject_ID", col_types = c(col_integer()))
subject_train<- read_table2("train/subject_train.txt", col_names = "Subject_ID", col_types = c(col_integer()))
subject_total<- rbind(subject_test, subject_train)
# Merging Activities and adding column names/types
activity_test <- read_table2("test/y_test.txt", col_names = "Activity_ID", col_types = c(col_integer()))
activity_train<- read_table2("train/y_train.txt", col_names = "Activity_ID", col_types = c(col_integer()))
activity_total <- rbind(activity_test, activity_train)
# obtaining activity labels
activity_labels<- read_table2("activity_labels.txt", col_names = c("Activity_ID", "Activity_Description"), col_types = c(col_integer(), col_character()))
# adding activity labels to activities
activities<- inner_join(activity_total, activity_labels, by = c("Activity_ID"))
# Merging Measures and adding column names/types
X_test <- suppressWarnings(read_table2("test/X_test.txt", col_names = var_names_vector, col_types = c(col_double())))
X_train<- suppressWarnings(read_table2("train/X_train.txt", col_names = var_names_vector, col_types = c(col_double())))
X_total<- rbind(X_test, X_train)
# Selecting only the "mean" and "std" related variables
selected_variables_mean<- grep("*[Mm]ean*", var_names_vector, value = TRUE)
selected_variables_std <- grep("*[Ss]td*",  var_names_vector,  value = TRUE)
df_mean <- select(X_total, selected_variables_mean)
df_std  <- select(X_total, selected_variables_std)
# Creating the whole dataset showing: activity description, subject ID and all the variables related to mean and std
DF <- cbind(select(activities, "Activity_Description"), subject_total, df_mean, df_std)
# Creating file with output dataset
if (file.exists("DF.txt")) file.remove("DF.txt")
write.table(DF, "DF.txt", row.names = FALSE)
# Grouping dataset by Activity Description and Subject ID
DF_grouped <- group_by(DF, Activity_Description, Subject_ID)
# Summarising data set
selected_fields <- append(selected_variables_mean, selected_variables_std)
DF_avg <- summarise_at(DF_grouped,selected_fields, mean)
# Creating summarised file with output dataset
if (file.exists("DF_avg.txt")) file.remove("DF_avg.txt")
write.table(DF_avg, "DF_avg.txt", row.names = FALSE)
quit()
